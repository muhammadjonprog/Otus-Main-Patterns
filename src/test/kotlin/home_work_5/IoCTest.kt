package home_work_5

import org.bot.home_work_3.Command
import org.junit.jupiter.api.Assertions.*
import kotlin.concurrent.thread
import kotlin.test.Test

class IoCTest {

    @Test
    fun `–¥–æ–ª–∂–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–µ–∑–æ–ª–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É`() {
        IoC.resolve<Command>(
            "IoC.Register",
            "move",
            { args: Array<out Any> ->
                val obj = args[0] as String
                ActionCommand { println("$obj moves forward") }
            } // <- –±–µ–∑ —Ç—Ä–µ–π–ª–∏–Ω–≥-–ª—è–º–±–¥—ã –≤–Ω–µ —Å–∫–æ–±–æ–∫
        ).execute()

        val cmd = IoC.resolve<Command>("move", "Ship-1")
        assertNotNull(cmd)
        cmd.execute()
    }

    @Test
    fun `–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Å–∫–æ—É–ø—ã`() {
        IoC.resolve<Command>("Scopes.New", "scopeA").execute()
        IoC.resolve<Command>("Scopes.Current", "scopeA").execute()

        IoC.resolve<Command>(
            "IoC.Register",
            "fire",
            { args: Array<out Any> ->
                val obj = args[0] as String
                ActionCommand { println("$obj shoots üî´") }
            }
        ).execute()

        val cmd = IoC.resolve<Command>("fire", "Ship-A")
        assertNotNull(cmd)
        cmd.execute()
    }

    @Test
    fun `—Ä–∞–∑–Ω—ã–µ —Å–∫–æ—É–ø—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è`() {
        // scope1
        IoC.resolve<Command>("Scopes.New", "scope1").execute()
        IoC.resolve<Command>("Scopes.Current", "scope1").execute()

        val output1 = StringBuilder()
        IoC.resolve<Command>(
            "IoC.Register",
            "turn",
            { args: Array<out Any> ->
                ActionCommand { output1.append("turn left") }
            }
        ).execute()

        // scope2
        IoC.resolve<Command>("Scopes.New", "scope2").execute()
        IoC.resolve<Command>("Scopes.Current", "scope2").execute()

        val output2 = StringBuilder()
        IoC.resolve<Command>(
            "IoC.Register",
            "turn",
            { args: Array<out Any> ->
                ActionCommand { output2.append("turn right") }
            }
        ).execute()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        IoC.resolve<Command>("Scopes.Current", "scope1").execute()
        val cmd1 = IoC.resolve<Command>("turn")
        cmd1.execute()

        IoC.resolve<Command>("Scopes.Current", "scope2").execute()
        val cmd2 = IoC.resolve<Command>("turn")
        cmd2.execute()

        assertNotEquals(output1.toString(), output2.toString()) // —Ä–∞–∑–Ω—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    }

    @Test
    fun `–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ç–µ—Å—Ç`() {
        IoC.resolve<Command>("Scopes.New", "thread1").execute()
        IoC.resolve<Command>("Scopes.New", "thread2").execute()

        val results = mutableListOf<String>()

        val t1 = thread {
            IoC.resolve<Command>("Scopes.Current", "thread1").execute()
            IoC.resolve<Command>(
                "IoC.Register",
                "action",
                { args: Array<out Any> -> ActionCommand { results.add("thread1 action") } }
            ).execute()
            IoC.resolve<Command>("action").execute()
        }

        val t2 = thread {
            IoC.resolve<Command>("Scopes.Current", "thread2").execute()
            IoC.resolve<Command>(
                "IoC.Register",
                "action",
                { args: Array<out Any> -> ActionCommand { results.add("thread2 action") } }
            ).execute()
            IoC.resolve<Command>("action").execute()
        }

        t1.join()
        t2.join()

        assertTrue(results.contains("thread1 action"))
        assertTrue(results.contains("thread2 action"))
    }
}